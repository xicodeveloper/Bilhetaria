@page "/"
@using System.Security.Claims
@using BlazorApp1.Services.Movies
@inject IConfiguration Configuration
@implements IDisposable
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]

@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Filmes Populares</PageTitle>

<div class="movies-container">
    <h1 class="main-title">🎬 Filmes Populares</h1>
    
    @if (_movies == null)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Carregando filmes...</p>
        </div>
    }
    else
    {
        <div class="movies-grid">
            @foreach (var movie in _movies)
            {
                <a href="movie/@movie.Id">
                <div class="movie-card">
                    <img src="@(LinkImage + movie.PosterPath)" 
                         class="movie-poster" 
                         alt="@movie.Title">
                    
                    <div class="movie-details">
                        <h3 class="movie-title">@movie.Title</h3>
                        
                        <div class="movie-info">
                            <span class="release-date">
                                📅 @movie.ReleaseDate.ToString("dd/MM/yyyy")
                            </span>
                            <span class="rating">
                                ⭐ @movie.VoteAverage.ToString("0.0")
                            </span>
                        </div>
                        
                        <p class="movie-overview">@movie.Overview.Truncate(150)</p>
                        
                        <div class="movie-stats">
                            <span class="genre-count">
                                🏷️ @movie.GenreIds.Count gêneros
                            </span>
                            <span class="votes">
                                👍 @movie.VoteCount.ToString("N0") votos
                            </span>
                        </div>
                    </div>
                </div>
                </a>
            }
        </div>
    }
</div>

@if (claims.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th>Tipo</th>
            <th>Valor</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var claim in claims)
        {
            <tr>
                <td>@claim.Type</td>
                <td>@claim.Value</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-warning">Nenhuma claim encontrada</div>
}

@code {
    private List<Claim> claims = new();


    private async Task LoadClaims()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            claims = authState.User.Claims.ToList();

            // Forçar atualização da UI
            StateHasChanged();


        }
        catch (Exception ex)
        {

        }
    }

    private string ApIlink => $"{Configuration["TmdbApi:BaseUrl"]}/movie/popular";
    private string LinkImage => Configuration["TmdbApi:ImageBaseUrl"]?? string.Empty;
    private List<Film>? _movies;
    private MovieDeserializer deserializer = new MovieDeserializer();  //aqui é feito para converter JSON para objeto
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadClaims();
            var response = deserializer.FetchPopularMovies(ApIlink);
            _movies = response.Results;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }

    public void Dispose()
    {
        deserializer?.Dispose();
    }
}
}