@page "/actor/{actorId:int}"
@using System.Globalization
@using BlazorApp1.Services.Actor
@inject IConfiguration Configuration
@inject HttpClient Http


<section class="actor-details-section">
</section>
<div class="actor-background" style="background-image: url('@GetProfileUrl(_actor?.ProfilePath)');"></div>
<div class="actor-background-overlay"></div>

<div class="actor-container">
    @if (_actor == null)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Carregando ator...</p>
        </div>
    }
    else
    {
        <div class="actor-details-layout">
            <div class="left-column">
                <img class="profile-picture" src="@(GetProfileUrl(_actor.ProfilePath))" alt="Foto de @_actor.Name" />
            </div>

            <div class="right-column">
                <h1 class="actor-name">@_actor.Name.ToUpper()</h1>
                <div class="time-relevance">
                    <span><strong>Nascimento:</strong> @FormatDate(_actor.Birthday)</span>
                    @if (!string.IsNullOrEmpty(_actor.PlaceOfBirth))
                    {
                        <span><strong>Local:</strong> @_actor.PlaceOfBirth</span>
                    }
                </div>

                <div class="biography">
                    <h2>Biografia</h2>
                    <p>@_actor.Biography</p>
                </div>

                @if (_actor.KnownFor != null && _actor.KnownFor.Any())
                {
                    <div class="known-for">
                        <h2>Conhecido por</h2>
                        <ul>
                            @foreach (var movie in _actor.KnownFor.Take(5))
                            {
                                <li><a href="/movie/@movie.Id">@movie.Title</a></li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    }
</div>


@code {
    [Parameter] public int actorId { get; set; }
    private ActorDetails _actor;

    private string ApiKey => Environment.GetEnvironmentVariable("API_KEY");
    private string BaseUrl => Configuration["TmdbApi:BaseUrl"];
    private string ImageBaseUrl => Configuration["TmdbApi:ImageBaseUrl"];

    protected override async Task OnInitializedAsync()
    {
        await LoadActor();
    }

    private async Task LoadActor()
    {
        try
        {
            var response = await Http.GetAsync($"{BaseUrl}/person/{actorId}?api_key={ApiKey}&append_to_response=movie_credits");
            
            if (response.IsSuccessStatusCode)
            {
                _actor = await response.Content.ReadFromJsonAsync<ActorDetails>();

            }
            else
            {
                Console.WriteLine($"Erro na API: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar ator: {ex.Message}");
        }
    }

    private string GetProfileUrl(string path)
    {
        Console.WriteLine(path);
        if (string.IsNullOrEmpty(path)) return "https://via.placeholder.com/300x450?text=No+Image";
        return $"{ImageBaseUrl}{path}";
    }

    private string FormatDate(DateTime? date)
    {
        return date.HasValue ? date.Value.ToString("dd MMMM yyyy", new CultureInfo("pt-PT")) : "-";
    }
    
}
<style>

    .actor-details-layout {
        margin-top: 70px;
        display: flex;
        gap: 3rem;
        padding: 2rem;
        flex-wrap: wrap;
        color: white;
    }

    .left-column {
        flex: 1 1 300px;
        display: flex;
        justify-content: center;
    }

    .profile-picture {
        width: 100%;
        max-width: 300px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.7);
    }

    .right-column {
        flex: 2;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    .actor-name {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .time-relevance {
        font-size: 1rem;
        margin-bottom: 1.5rem;
        display: flex;
        gap: 1.5rem;
    }

    .biography h2, .known-for h2 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
    }

    .biography p {
        font-size: 1rem;
        line-height: 1.6;
        margin-bottom: 1.5rem;
    }

    .known-for ul {
        list-style: none;
        padding: 0;
    }

    .known-for li {
        margin-bottom: 0.5rem;
    }

    .known-for a {
        color: #1e88e5;
        text-decoration: none;
        font-weight: bold;
    }

    .actor-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        z-index: -2;
        filter: blur(10px);
        opacity: 0.3;
    }

    .actor-background-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to bottom, rgba(0,0,0,0.8), rgba(0,0,0,0.9));
        z-index: -1;
    }

</style>