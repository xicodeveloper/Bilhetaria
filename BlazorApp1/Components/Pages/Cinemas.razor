@page "/cinemas"
@layout MainLayout
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services.RegLogin
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@inject IAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@attribute [Authorize]

<div class="page-container">
    <div class="container-cinemaPage">

        <h1> Seleciona o horário</h1>
        <div class="Selector scrollable" id="ScrollableContainer">

            @foreach (var day in AvailableDays)
            {
                <button class="dayButton @(SelectedDay == day ? "activeButton" : " ")" @onclick="() => SelectDay(day)">
                    @day.Display
                </button>
            }
        </div>
        @if (AvailableShows.ContainsKey(SelectedDay))
        {
            <div class="cinemasDiv">
                <h1> Seleciona o horário</h1>
                @foreach (var cinema in AvailableShows[SelectedDay])
                {
                    <div class="Selector cinemaDetails">
                        <h2> @cinema.Cinema </h2>
                        <h3 class="cuadroCastanho"> @cinema.Format2D3D </h3>
                        <div class="horaDisplay">
                            @foreach (var Time in cinema.Times)
                            {
                                <a style="text-decoration: none; color: inherit;" href="@($"/bilhetes?movieId={movieId}&cinema={Uri.EscapeDataString(cinema.Cinema)}&hora={Time}&data={SelectedDay.Date:yyyy-MM-dd}")">
                                    <h4 class="timeButton cuadroCastanho">@Time</h4>
                                </a>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <h1>Não tem funções disponiveis.</h1>
        }
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? movieId { get; set; }

    private class DayOption
    {
        public string Display { get; set; }
        public DateTime Date { get; set; }
    }

    private List<DayOption> AvailableDays = new();
    private Dictionary<DayOption, List<(string Cinema, string Format2D3D, List<string> Times)>> AvailableShows = new();
    private DayOption SelectedDay;

    private readonly List<(string Cinema, string Format2D3D)> CinemaList = new()
    {
        ("CinePlace", "2D"),
        ("Cinemas NOS Porto", "2D"),
        ("Cinemas NOS Porto", "3D"),
        ("Cinemas NOS Madeira", "2D"),
        ("Cinema UMaX", "2D"),
        ("Cinema UMaX", "3D")
    };

    protected override void OnInitialized()
    {
        for (int i = 0; i < 7; i++)
        {
            var date = DateTime.Today.AddDays(i);
            string display;
            if (i == 0)
                display = "Hoje";
            else if (i == 1)
                display = "Amanhã";
            else
                display = date.ToString("dddd", new CultureInfo("pt-PT"));

            AvailableDays.Add(new DayOption { Display = display, Date = date });
        }
        SelectedDay = AvailableDays[0];

        var rand = new Random();
        foreach (var day in AvailableDays)
        {
            var shows = new List<(string Cinema, string Format2D3D, List<string> Times)>();
            int cinemasToday = rand.Next(2, CinemaList.Count + 1);
            var cinemasForDay = CinemaList.OrderBy(x => rand.Next()).Take(cinemasToday).ToList();

            foreach (var (cinema, format) in cinemasForDay)
            {
                var times = new List<string>();
                int showCount = rand.Next(2, 5);
                var baseHour = rand.Next(15, 20);
                for (int t = 0; t < showCount; t++)
                {
                    var hour = (baseHour + t) % 24;
                    var minute = rand.Next(0, 2) == 0 ? "00" : "30";
                    times.Add($"{hour:D2}:{minute}");
                }
                shows.Add((cinema, format, times));
            }
            AvailableShows[day] = shows;
        }
    }

    private void SelectDay(DayOption day)
    {
        SelectedDay = day;
        StateHasChanged();
    }
}