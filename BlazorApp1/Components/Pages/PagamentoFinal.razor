@page "/pagamentoFinal"
@layout MainLayout
@using System.Security.Claims
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services.RegLogin
@using BlazorApp1.Services.DataBase
@using BlazorApp1.Services.DataBase.DBEntities
@using BlazorApp1.Services.DataBase.DBEntities.BasketItems
@using BlazorApp1.Services.DataBase.DBEntities.Enum
@using BlazorApp1.Services.DataBase.OrderState
@using BlazorApp1.Services.Discounts
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject EmailService EmailService
@rendermode InteractiveServer
@inject IUnitOfWork _UnitOfWork
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IStateFactory _StateFactory


<div class="page-container">
    <form class="grid-container" @onsubmit="HandleSubmit">

        <!-- Coluna Esquerda -->
        <div class="grid-item left-column">
            <!-- Informações pessoais -->
            <div class="grid-item info-card personal-info">
                <div class="title">
                    <h3>Informações Pessoais</h3>
                    <hr/>
                </div>
                <!-- Campos de entrada -->
                <input type="text" placeholder="Nome completo" class="form-input"/>
                <input type="email" placeholder="Email" class="form-input"/>
                <input type="text" placeholder="Número de telefone" class="form-input"/>
            </div>

            <!-- Informações de pagamento -->
            <div class="grid-item info-card payment-info">
                <div class="title">
                    <h3>Informações de Pagamento</h3>
                    <hr/>
                </div>

                <!-- Formulário para Cartão -->
                <div class="paymentType">
                    @if (metodoSelecionado == PaymentMethod.CreditCard)
                    {
                        <input type="text" placeholder="Número do cartão" class="form-input"/>
                        <input type="text" placeholder="Validade (MM/AA)" class="form-input"/>
                        <input type="text" placeholder="CVC" class="form-input"/>
                    }
                    else if (metodoSelecionado == PaymentMethod.ApplePay)
                    {
                        <p>Será redirecionado para o site do PayPal para concluir o pagamento.</p>
                    }
                    else if (metodoSelecionado == PaymentMethod.Mbway)
                    {
                        <input type="text" placeholder="Número de telemóvel MBWay" class="form-input"/>
                    }
                </div>
                <!-- Botões para escolher método -->
                <div class="payment-method-buttons">
                    <button type="button" class="@GetButtonClass(PaymentMethod.CreditCard)" @onclick="() => SelecionarMetodo(PaymentMethod.CreditCard)">Cartão</button>
                    <button type="button" class="@GetButtonClass(PaymentMethod.ApplePay)" @onclick="() => SelecionarMetodo(PaymentMethod.ApplePay)">PayPal</button>
                    <button type="button" class="@GetButtonClass(PaymentMethod.Mbway)" @onclick="() => SelecionarMetodo(PaymentMethod.Mbway)">MBWay</button>
                </div>
            </div>

            <!-- Desconto -->
            
            <div class="grid-item info-card discount-info">
                
                <div class="title">
                    <h3>Desconto Aplicado</h3>
                    <hr/>
                </div>
                @if (order?.Items != null && order.Items.Any())
                {
                    @foreach (var item in order.Items)
                    {
                        if (item.Discount > 0)
                        {
                            <p>- @item.Discount % de desconto em @item.Movie.MovieTitle</p>
                            
                        }
                        
                    }
                }else
                {
                    <p>Não há desconto aplicado.</p>
                }
            </div>
        </div>

        <!-- Coluna Direita -->
        <div class="grid-item right-column">
            <div class="grid-item info-card checkout-summary">
                <div class="title">
                    <h3>Resumo da Compra</h3>
                    <hr/>
                </div>

                <!-- Lista de produtos -->
                <div class="product-list">
                    @if (order?.Items != null && order.Items.Any())
                    {
                        @foreach (var item in order.Items)
                        {
                            
                            <div class="product-item" key="@(item.Id)">
                                <img src="@item.Movie.MoviePosterUrl" alt="@item.Movie.MovieTitle" class="product-image"/>
                                <div class="product-info">
                                    <div class="product-title">@item.Movie.MovieTitle (@item.GetTicketType()) x @item.Quantity </div>
                                    <div>@printAditionalInfo(item)</div>  
                                    <div>Descontos: @item.Discount %</div>
                                    
                                    <button type="button" class="remove-btn"
                                            @onclick="async () => await RemoverUnidade(item)">
                                        Remover Unidade
                                    </button>
                                </div>
                                <div class="product-price">
                                    @if (item.Discount > 0)
                                    {
                                        <s class="original-price">@item.Price.ToString("0.00")€</s>
                                    }
                                    <span class="discounted-price">@GetDiscountedPrice(item).ToString("0.00")€</span>
                                </div>
                            </div>
                            
                        }
                    }
                    else
                    {
                        <p>O seu carrinho está vazio.</p>
                    }
                </div>
                <hr/>
                
                <div class="price-details">
                    <div class="priceContainer">
                        <p>Subtotal: </p>
                        <p class="priceValue">@subtotal.ToString("F2")€</p>
                    </div>
                    <div class="priceContainer">
                        <p>Desconto: </p>
                        <p class="priceValue">-@desconto.ToString("F2")€</p>
                    </div>
                    <div class="priceContainer">
                        <p>Custos de envio: </p>
                        <p class="priceValue">@shipping.ToString("F2")€</p>
                    </div>
                    
                    <hr/>
                    <div class="priceContainer">
                        <p><strong>Total: </strong></p>
                        <p class="priceValue"><strong>@total.ToString("F2")€</strong></p>
                    </div>

                    <button type="submit" class="checkout-btn">Checkout</button>
                </div>
            </div>
        </div>
    </form>
</div>

@code {
    private Order order;
    private string userId;
    private Guid UserId;
    private List<Claim> claims = new();
    private PaymentMethod metodoSelecionado = PaymentMethod.CreditCard;
    
    private double subtotal;
    private double desconto;
    private double shipping;
    private double total;
    
    private IStrategyDiscount discountStrategy;


    protected override async Task OnInitializedAsync()
    {

        await LoadClaims();
        await CarregarDadosDoCarrinho();
    }

    private async Task CarregarDadosDoCarrinho()
    {
        if (UserId != Guid.Empty)
        {
            order = _UnitOfWork.GetRepository<Order>().GetWithQuery(
                q => q
                    .Where(o => o.UserId == UserId && o.Status == OrderStatus.Pending)
                    .Include((Order o) => o.Items)
                    .ThenInclude((BasketItem i) => i.Movie)
            ).FirstOrDefault();
            CalcularTotais();
            StateHasChanged();
        }
    }
    private double GetDiscountedPrice(BasketItem item)
    {
        IStrategyDiscount strategy = item.Discount switch
        {
            10 => new TenDiscount(),
            25 => new TwentyFiveDiscount(),
            70 => new SeventyDiscount(),
            _ when item.Discount > 0 => new GenericDiscount(item.Discount),
            _ => new WithoutDiscount()
        };

        ApplyDiscoutStrategy applier = new ApplyDiscoutStrategy(strategy);
        return applier.ApplyDiscount(item.Price);
    }
    private void CalcularTotais()
    {
        subtotal = 0;
        desconto = 0;
        shipping = 5.20;

        if (order?.Items == null)
        {
            return;
        }
        if (order.Items.Count == 0)
        {
            shipping = 0;
        }
        foreach (var item in order.Items)
        {
            double originalPrice = item.Price;
            double discountPercentage = item.Discount;

            IStrategyDiscount strategy = discountPercentage switch
            {
                10 => new TenDiscount(),
                25 => new TwentyFiveDiscount(),
                70 => new SeventyDiscount(),
                _ when discountPercentage > 0 => new GenericDiscount(discountPercentage),
                _ => new WithoutDiscount()
            };

            ApplyDiscoutStrategy discountApplier = new ApplyDiscoutStrategy(strategy);
            double discountedPrice = discountApplier.ApplyDiscount(originalPrice);

            subtotal += discountedPrice * item.Quantity;
            desconto += (originalPrice - discountedPrice) * item.Quantity;
        }

        
        total = subtotal + shipping;
    }

    private async Task LoadClaims()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            claims = authState.User.Claims.ToList();
            userId = GetUserId();
            
            if (!string.IsNullOrEmpty(userId))
            {
                UserId = Guid.Parse(userId);
                Console.WriteLine($"User ID: {UserId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar claims: {ex.Message}");
        }
    }

    private string GetUserId()
    {
        return claims.FirstOrDefault(c =>
            c.Type == ClaimTypes.NameIdentifier || c.Type == "sub")?.Value;
    }

    private async Task RemoverUnidade(BasketItem item)
    {
        try
        {
            if (item.Quantity > 1)
            {
                item.Quantity--;
                _UnitOfWork.GetRepository<Order>().Update(order);
            }
            else
            {
                _UnitOfWork.GetRepository<BasketItem>().Delete(item);
            }
            await CarregarDadosDoCarrinho();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao remover unidade: {ex.Message}");
        }
    }
    private async Task HandleSubmit()
    {
        try
        {
            if (order == null) return;
            
            order.Pay(total, metodoSelecionado, _StateFactory);
            
            var user =  _UnitOfWork.GetRepository<User>()
                .GetById(UserId);
 
            if (user != null && !string.IsNullOrEmpty(user.Email))
            {
                await EmailService.SendOrderConfirmationAsync(order, user.Email, 5.20);
            }

            NavigationManager.NavigateTo("/", new NavigationOptions 
            {
                HistoryEntryState = "payment-success"
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en el pago: {ex.Message}");

        }
    }

    private void SelecionarMetodo(PaymentMethod metodo)
    {
        metodoSelecionado = metodo;
        StateHasChanged();
    }

    private string GetButtonClass(PaymentMethod metodo)
    {
        return metodoSelecionado == metodo ? "active" : "";
    }
    private string printAditionalInfo(BasketItem item)
    {
        
        switch (item.GetTicketType())
        {
            case TicketType.Ticket:
                var ticketMovie = item as TicketMovie;
                return "Seat: " + ticketMovie?.Seat;
                
            case TicketType.Rental:
                var rentalMovie = item as RentalMovie;
                return "Valido até: " + rentalMovie?.Validade.ToString("dd/MM/yyyy");
                
            case TicketType.Physical:
                var physicalMovie = item as PhysicalMovie;
                return "Formato: " + physicalMovie?.Type;
                
            default:
                return "";
        }
    }
}