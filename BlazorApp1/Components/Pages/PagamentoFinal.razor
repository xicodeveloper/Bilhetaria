@page "/pagamentoFinal"
@layout MainLayout
@using System.Security.Claims
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services.RegLogin
@using BlazorApp1.Services.DataBase
@using BlazorApp1.Services.Discounts
@using BlazorApp1.Services.OrderFiles
@using BlazorApp1.Services.Orders.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject IAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer
@inject IUnitOfWork _UnitOfWork
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<ApplicationDbContext> _contextFactory

<div class="page-container">
    <form class="grid-container" @onsubmit="HandleSubmit">

        <!-- Coluna Esquerda -->
        <div class="grid-item left-column">
            <!-- Informações pessoais -->
            <div class="grid-item info-card personal-info">
                <div class="title">
                    <h3>Informações Pessoais</h3>
                    <hr/>
                </div>
                <!-- Campos de entrada -->
                <input type="text" placeholder="Nome completo" class="form-input"/>
                <input type="email" placeholder="Email" class="form-input"/>
                <input type="text" placeholder="Número de telefone" class="form-input"/>
            </div>

            <!-- Informações de pagamento -->
            <div class="grid-item info-card payment-info">
                <div class="title">
                    <h3>Informações de Pagamento</h3>
                    <hr/>
                </div>

                <!-- Formulário para Cartão -->
                <div class="paymentType">
                    @if (metodoSelecionado == "visa")
                    {
                        <input type="text" placeholder="Número do cartão" class="form-input"/>
                        <input type="text" placeholder="Validade (MM/AA)" class="form-input"/>
                        <input type="text" placeholder="CVC" class="form-input"/>
                    }
                    else if (metodoSelecionado == "paypal")
                    {
                        <p>Será redirecionado para o site do PayPal para concluir o pagamento.</p>
                    }
                    else if (metodoSelecionado == "mbway")
                    {
                        <input type="text" placeholder="Número de telemóvel MBWay" class="form-input"/>
                    }
                </div>
                <!-- Botões para escolher método -->
                <div class="payment-method-buttons">
                    <button type="button" class="@GetButtonClass("visa")" @onclick="() => SelecionarMetodo(1)">Cartão</button>
                    <button type="button" class="@GetButtonClass("paypal")" @onclick="() => SelecionarMetodo(2)">PayPal</button>
                    <button type="button" class="@GetButtonClass("mbway")" @onclick="() => SelecionarMetodo(3)">MBWay</button>
                </div>
            </div>

            <!-- Desconto -->
            
            <div class="grid-item info-card discount-info">
                
                <div class="title">
                    <h3>Desconto Aplicado</h3>
                    <hr/>
                </div>
                @if (order?.Basket?.Items != null && order.Basket.Items.Any())
                {
                    @foreach (var item in order.Basket.Items)
                    {
                        if (item.Discount > 0)
                        {
                            <p>- @item.Discount % de desconto em @item.MovieTitle</p>
                            
                        }
                        
                    }
                }else
                {
                    <p>Não há desconto aplicado.</p>
                }
            </div>
        </div>

        <!-- Coluna Direita -->
        <div class="grid-item right-column">
            <div class="grid-item info-card checkout-summary">
                <div class="title">
                    <h3>Resumo da Compra</h3>
                    <hr/>
                </div>

                <!-- Lista de produtos -->
                <div class="product-list">
                    @if (order?.Basket?.Items != null && order.Basket.Items.Any())
                    {
                        @foreach (var item in order.Basket.Items)
                        {
                            <div class="product-item">
                                <img src="@item.MoviePosterUrl" alt="@item.MovieTitle" class="product-image"/>
                                <div class="product-info">
                                    <div class="product-title">@item.MovieTitle</div>
                                    <div>Descontos: @item.Discount %</div>
                                    <div class="product-desc">(@item.ScreeningDate)</div>
                                    <button type="button" class="remove-btn" @onclick="async () => await RemoverProduto(item.Id)">X Remover</button>
                                </div>
                                <div class="product-price">@item.Price.ToString("0.00")€</div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>O seu carrinho está vazio.</p>
                    }
                </div>
                <hr/>
                
                <div class="price-details">
                    <div class="priceContainer">
                        <p>Subtotal: </p>
                        <p class="priceValue">@subtotal.ToString("F2")€</p>
                    </div>
                    <div class="priceContainer">
                        <p>Desconto: </p>
                        <p class="priceValue">-@desconto.ToString("F2")€</p>
                    </div>
                    <div class="priceContainer">
                        <p>Custos de envio: </p>
                        <p class="priceValue">@shipping.ToString("F2")€</p>
                    </div>
                    
                    <hr/>
                    <div class="priceContainer">
                        <p><strong>Total: </strong></p>
                        <p class="priceValue"><strong>@total.ToString("F2")€</strong></p>
                    </div>

                    <button type="submit" class="checkout-btn">Checkout</button>
                </div>
            </div>
        </div>
    </form>
</div>

@code {
    private Order order;
    private string userId;
    private int UserId;
    private List<Claim> claims = new();
    private string metodoSelecionado = "visa";
    
    private double subtotal;
    private double desconto = 1.90;
    private double shipping = 5.90;
    private double total;
    
    private ApplyDiscoutStrategy discountStrategy;


    protected override async Task OnInitializedAsync()
    {

        await LoadClaims();
        //ApplyDiscoutStrategy strategy = new ApplyDiscoutStrategy (discountStrategy, new TenDiscount());
        await CarregarDadosDoCarrinho();
    }

    private async Task CarregarDadosDoCarrinho()
    {
        if (UserId > 0)
        {
            order = await _UnitOfWork.Orders.GetActiveOrderWithItemsAsync(UserId);
            CalcularTotais();
            StateHasChanged();
        }
    }

    private void CalcularTotais()
    {
        subtotal = order?.Basket?.Items?.Sum(i => i.Price) ?? 0;
        total = subtotal - desconto + shipping;
    }

    private async Task LoadClaims()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            claims = authState.User.Claims.ToList();
            userId = GetUserId();
            
            if (!string.IsNullOrEmpty(userId))
            {
                UserId = int.Parse(userId);
                Console.WriteLine($"User ID: {UserId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar claims: {ex.Message}");
        }
    }

    private string GetUserId()
    {
        return claims.FirstOrDefault(c =>
            c.Type == ClaimTypes.NameIdentifier || c.Type == "sub")?.Value;
    }

    private async Task RemoverProduto(int itemId)
    {
        try
        {
            await _UnitOfWork.Orders.RemoveBasketItemAsync(itemId);
            await _UnitOfWork.Orders.UpdateAsync(order);
            await CarregarDadosDoCarrinho();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao remover item: {ex.Message}");
        }
    }

    private void HandleSubmit()
    {
        // Implementar lógica de pagamento
    }

    private void SelecionarMetodo(int metodo)
    {
        metodoSelecionado = metodo switch
        {
            1 => "visa",
            2 => "paypal",
            3 => "mbway",
            _ => metodoSelecionado
        };
        StateHasChanged();
    }

    private string GetButtonClass(string metodo)
    {
        return metodoSelecionado == metodo ? "active" : "";
    }
}