@page "/movie/{Id:int}"
@inherits BlazorApp1.Components.Layout.MainLayout
@implements IDisposable
@attribute [Authorize]

@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@using BlazorApp1.Services.Models
@using System.Threading
@using BlazorApp1.Services
@using BlazorApp1.Services.OrderFiles
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore.Metadata.Internal

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<div class="movie-container">
    @if (_movie == null)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Carregando filme...</p>
        </div>
    }
    else
    {
        <div class="movie-header" style="background-image: url('@_backdropImage');">
            <div class="header-content">
                <!-- Header Actors -->
                <div class="header-actors">
                    @if (_credits?.Cast != null)
                    {
                        @foreach (var actor in _credits.Cast.Take(2))
                        {
                            <h2>@actor.Name</h2>
                        }
                    }
                </div>

                <!-- Tagline -->
                <p class="tagline">@_movie.Tagline</p>

                <!-- Title Section -->
                <div class="movie-title-section">
                    <h1>@_movie.Title.ToUpper()</h1>
                    @if (!string.IsNullOrEmpty(_trailerUrl))
                    {
                        <a href="@_trailerUrl" target="_blank" class="btn-trailer">TRAILER</a>
                    }
                    else
                    {
                        <button class="btn-trailer" disabled>TRAILER INDISPONÍVEL</button>
                    }
                </div>
            </div>
        </div>

        <!-- Movie Details -->
        <div class="movie-details">
            <h2>@_movie.OriginalTitle</h2>

            <!-- Runtime & Relevance -->
            <div class="time-relevance">
                <span>@FormatRuntime(_movie.Runtime)</span>
                <span class="relevance">@((_movie.VoteAverage * 10).ToString("0"))% relevância</span>
            </div>

            <div class="purchase-options">
                <button class="btn-rent" @onclick="async () => await BuyAluga()">ALUGAR (2,49€)</button>
                <button class="btn-tickets" @onclick="async () => await BuyAluga()">COMPRAR</button>
                <button class="btn-tickets" @onclick="async () => await BuyTicket()">BILHETES</button>
                
            </div>

            <!-- Favorites -->
            <button class="btn-favorite">FAVORITAR</button>

            <!-- Synopsis -->
            <div class="synopsis">
                <p>@_movie.Overview</p>
            </div>

            <!-- Cast & Genre -->
            <div class="cast-genre">
                <p><strong>Elenco:</strong> @string.Join(", ", _credits?.Cast?.Take(5).Select(c => c.Name) ?? Enumerable.Empty<string>())</p>
                <p><strong>Género:</strong> @string.Join(", ", _movie.Genres.Select(g => g.Name))</p>
            </div>
        </div>

        <!-- Keywords Section -->
        <div class="keywords-section">
            <div class="keywords">
                @if (_keywords?.Keywords != null)
                {
                    @foreach (var keyword in _keywords.Keywords.Take(15))
                    {
                        <a href="/movie/@keyword.Id" class="keyword-link">
                            @keyword.Name.ToUpper()
                        </a>
                    }
                }
            </div>
        </div>
    }


</div>

@code {
   
    // Parameters
    [Parameter] public int Id { get; set; }
    private Order order;


    private string userId { get; set; }
    private string ApiKey = Environment.GetEnvironmentVariable("API_KEY");
    private string BaseUrl => Configuration["TmdbApi:BaseUrl"];
    private string ImageBaseUrl => Configuration["TmdbApi:ImageBaseUrl"];

    private List<Claim> claims = new();

    // State
    private MovieDetails _movie;
    private CreditsResponse _credits;
    private KeywordsResponse _keywords;
    private string _trailerUrl;

    private string _backdropImage => string.IsNullOrEmpty(_movie?.backdrop_path)
        ? null
        : $"{ImageBaseUrl}{_movie.backdrop_path}";
    void SelecionarMorada()
    {
       Console.WriteLine("Hellooo");
        StateHasChanged();
    }
    private async Task BuyTicket()
    {
        try
        {
            Console.WriteLine("Processando bilhetes...");
            Navigation.NavigateTo("/cinemas");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
    
    
    private async Task BuyAluga()
    {
        try
        {
            /*
             var order = OrderBuilder.Empty()
                .WithId(1)
                .Build();
            

            

                Navigation.NavigateTo("/basket");
            */
            Console.WriteLine("Processando compra...");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadClaims();
            await LoadMovieData();
            await LoadCredits();
            await LoadKeywords();
            await LoadTrailer();
            //await BuyTicket();
            //await BuyForever();
            //await AddFav();
           
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
    }

    private async Task LoadMovieData() =>
        _movie = await Http.GetFromJsonAsync<MovieDetails>($"{BaseUrl}/movie/{Id}?api_key={ApiKey}");

    private async Task LoadCredits() =>
        _credits = await Http.GetFromJsonAsync<CreditsResponse>($"{BaseUrl}/movie/{Id}/credits?api_key={ApiKey}");

    private async Task LoadKeywords() =>
        _keywords = await Http.GetFromJsonAsync<KeywordsResponse>($"{BaseUrl}/movie/{Id}/keywords?api_key={ApiKey}");

    private async Task LoadTrailer()
    {
        var videos = await Http.GetFromJsonAsync<VideosResponse>($"{BaseUrl}/movie/{Id}/videos?api_key={ApiKey}");
        var trailer = videos?.Results?.FirstOrDefault(v => v.Type == "Trailer");
        _trailerUrl = trailer != null ? $"https://www.youtube.com/embed/{trailer.Key}" : null;
    }

    private string FormatRuntime(int runtime)
    {
        var hours = runtime / 60;
        var minutes = runtime % 60;
        return $"{hours}h {minutes}m";
    }


    private string GetUserId()
    {
        return claims.FirstOrDefault(c =>
            c.Type == ClaimTypes.NameIdentifier || c.Type == "sub")?.Value;
    }

    private async Task LoadClaims()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            claims = authState.User.Claims.ToList();

            userId = GetUserId();

            Console.WriteLine($"User ID: {userId}");
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }

    
 



    public void Dispose()
    {
        // Cleanup resources if needed
    }

}