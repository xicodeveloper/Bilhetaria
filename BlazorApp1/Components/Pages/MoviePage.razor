@page "/movie/{Id:int}"
@inherits BlazorApp1.Components.Layout.MainLayout
@implements IDisposable
@attribute [Authorize]
@inject IUnitOfWork _unitOfWork
@using System.Globalization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@using BlazorApp1.Services.Models
@using System.Threading
@using BlazorApp1.Services
@using BlazorApp1.Services.DataBase
@using BlazorApp1.Services.OrderFiles
@using BlazorApp1.Services.Orders.Builders
@using BlazorApp1.Services.Orders.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore.Metadata.Internal

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserRepository UserRepository
@rendermode InteractiveServer

<section class="movie-details-section">
</section>
    <div class="movie-background" style="background-image: url('@_backdropImage');"></div>
    <div class="movie-background-overlay"></div>

<div class="movie-container">
    @if (_movie == null)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Carregando filme...</p>
        </div>
    }
    else
    {
        <div class="movie-details-layout">
            <div class="left-column">
                <img class="movie-poster" src="@($"{ImageBaseUrl}{_movie.poster_path}")" alt="Capa do filme" />
                @if (!string.IsNullOrEmpty(_trailerUrl))
                {
                    <a href="@_trailerUrl" target="_blank" class="btn-trailer">Ver Trailer</a>
                }
            </div>

            <div class="right-column">
                <h1 class="movie-title">@_movie.Title.ToUpper()</h1>

                <div class="time-relevance">
                    <span>@FormatRuntime(_movie.Runtime)</span>
                    <span class="relevance">@((_movie.VoteAverage * 10).ToString("0"))% relevância</span>
                </div>

                <div class="purchase-buttons">
                    <button class="btn-rent" @onclick="async () => await BuyAsync(PurchaseType.Aluga)">ALUGAR</button>
                    <button class="btn-buy" @onclick="async () => await BuyAsync(PurchaseType.Forever)">COMPRAR</button>
                    <a href="/cinemas"><button class="btn-tickets">BILHETES</button></a>
                </div>

                <div class="synopsis">
                    <p>@_movie.Overview</p>
                </div>

                <!-- Favorites -->
                <button class="btn-favorite">FAVORITE</button>

            <!-- Cast & Genre -->
            <div class="cast-genre">
                <p><strong>Elenco:</strong> @string.Join(", ", _credits?.Cast?.Take(5).Select(c => c.Name) ?? Enumerable.Empty<string>())</p>
                <p><strong>Género:</strong> @string.Join(", ", _movie.Genres.Select(g => g.Name))</p>
            </div>
            </div>
            
        </div>

        @if (_similarMovies != null && _similarMovies.Any())
        {
            <div class="similar-movies">
                <h2>Filmes Semelhantes</h2>
                <div class="similar-movie-list">
                    @foreach (var movie in _similarMovies)
                    {
                        <div class="similar-movie-card">
                            <a href="/movie/@movie.Id">
                                <img class="movie-poster" src="@($"{LinkImage}{movie.PosterPath ?? "default-poster.jpg"}")" alt="@movie.Title" />
                                <img src="https://image.tmdb.org/t/p/w200@(movie.PosterPath)" alt="@movie.Title" />
                                <img src="@($"{LinkImage}{movie.PosterPath}")" alt="@movie.Title" />
                                <img src="@GetPosterUrl(movie.PosterPath)" alt="@movie.Title" />

                            </a>
                        </div>
                    }
                </div>
            </div>
        }

        @if (_keywords?.Keywords != null && _keywords.Keywords.Any())
        {
            <div class="keywords-section">
            <h3>Palavras-chave</h3>
            <div class="keywords">
                @foreach (var keyword in _keywords.Keywords.Take(15))
                {
                <span class="keyword-link">@keyword.Name.ToUpper()</span>
                }
            </div>
            </div>
        }
    }
    </div>

    @if (!string.IsNullOrEmpty(discount))
    {
        <div class="discount-banner">
            Promoção Ativa: @discount
        </div>
        <p>Numero : @number_discount ! Ola</p>
        <p>Preco: @priceMovie %</p>
    }
    else
    {
        <p>Não houve desconto</p>
    }

@code {
   
    // Parameters
    [Parameter] public int Id { get; set; }
    private Order order;
    private User user;

    private string userId { get; set; }
    private string _posterUrl;
    private string ApiKey = Environment.GetEnvironmentVariable("API_KEY");
    private string LinkImage => Configuration["TmdbApi:ImageBaseUrl"] ?? string.Empty;
    private string BaseUrl => Configuration["TmdbApi:BaseUrl"];
    private string ImageBaseUrl => Configuration["TmdbApi:ImageBaseUrl"];

    private List<Claim> claims = new();

    // State
    private MovieDetails _movie;
    private CreditsResponse _credits;
    private KeywordsResponse _keywords;
    private string _trailerUrl;
    private string? discount;
    private int number_discount;
    private int desconto;

    private string? _priceValue;
    private double priceMovie;
    private string _backdropImage => string.IsNullOrEmpty(_movie?.backdrop_path)
        ? null
        : $"{ImageBaseUrl}{_movie.backdrop_path}";
    
    private List<MovieSummary> _similarMovies;

    public class MovieListResponse
    {
        public List<MovieSummary> Results { get; set; }
    }

    public class MovieSummary
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string PosterPath { get; set; }
    }

    private async Task LoadSimilarMovies()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<MovieListResponse>($"{BaseUrl}/movie/{Id}/similar?api_key={ApiKey}");
            _similarMovies = response?.Results?.Take(20).ToList(); // limita a 10 filmes semelhantes
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar filmes semelhantes: {ex.Message}");
            _similarMovies = new();
        }
    }
        public enum PurchaseType
        {
            Aluga,
            Forever
        }
    private async Task BuyAsync(PurchaseType type)
    {
        try
        {
            if (!int.TryParse(userId, out var userIdInt)) return;
            
            user = await _unitOfWork.Users.GetByIdAsync(userIdInt);
            if (user?.Addresses == null || user.Addresses.Count == 0)
            {
                Console.WriteLine("Tem que inserir morada primeiro");
                Navigation.NavigateTo("/perfilAdmin");
                return;
            }

            // Obter morada principal
            var shippingAddress = user.Addresses.FirstOrDefault(a => a.IstheOne);
            if (shippingAddress == null)
            {
                Console.WriteLine("Nenhum endereço principal encontrado.");
                return;
            }

            // Parâmetros específicos do tipo de compra
            var (price, screeningDate, ticketType) = type switch
            {
                PurchaseType.Aluga => (priceMovie * 0.25, DateTime.UtcNow.AddDays(7), TicketType.Rental),
                PurchaseType.Forever => (priceMovie, DateTime.UtcNow, TicketType.Digital),
                _ => throw new ArgumentException("Tipo de compra inválido")
            };

            // Verificar encomenda existente
            var existingOrder = await _unitOfWork.Orders.GetActiveOrderWithItemsAsync(userIdInt);

            var title = _movie?.Title ?? "Sem Título";
            var posterUrl = _backdropImage ?? "Poster não definido";

            if (existingOrder != null)
            {
                BasketItem item = existingOrder.Basket.Items.FirstOrDefault(i => i.MovieId == Id && i.Type == ticketType);
                if (item != null)
                {
                    item.Quantity++;
                }
                else
                {
                    // Adicionar item à encomenda existente
                    existingOrder.Basket.Items.Add(new BasketItem
                    {
                    MovieId = Id,
                    MovieTitle = title,
                    MoviePosterUrl = posterUrl,
                    Quantity = 1,
                    ScreeningDate = screeningDate,
                    Price = priceMovie,
                    Discount = number_discount,
                    Type = ticketType,
                    });
                }
                
                await _unitOfWork.Orders.UpdateAsync(existingOrder);
            }
            else
            {
                // Criar nova encomenda
                var orderBuilder = new OrderBuilder()
                    .WithUserId(userIdInt)
                    .WithNumber(type == PurchaseType.Aluga ? Id.ToString() : Guid.NewGuid().ToString())
                    .WithDate(DateTime.UtcNow)
                    .WithShippingAddress(a => a
                        .WithStreet(shippingAddress.Street)
                        .WithNumber(shippingAddress.Number)
                        .WithCity(shippingAddress.City)
                        .WithState(shippingAddress.State)
                        .WithZipCode(shippingAddress.ZipCode)
                        .WithCountry(shippingAddress.Country)
                        .WithUser(user))
                    .WithBasket(b => b
                        .WithDigitalTicket(
                            movieId: Id,
                            title: title,
                            posterUrl: posterUrl,
                            quantity: 1,
                            screeningDate: screeningDate,
                            price: priceMovie,
                            discount: number_discount));

                if (type == PurchaseType.Forever)
                {
                    orderBuilder.WithOrderStatus(OrderStatus.Pending);
                }

                await _unitOfWork.Orders.AddAsync(orderBuilder.Build());
            }

            await _unitOfWork.CommitAsync();
            Navigation.NavigateTo("/basket");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro em BuyAsync: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadSimilarMovies();
            await LoadClaims();
            await LoadMovieData();
            await LoadCredits();
            await LoadKeywords();
            await LoadTrailer();
            
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            var parameters = new List<string>();
            
            // Coletar price corretamente
            if (query.TryGetValue("price", out var priceValues) && priceValues.Count > 0)
            {
                _priceValue = priceValues[0];
                if (double.TryParse(_priceValue, NumberStyles.Any, CultureInfo.InvariantCulture, out var parsedPrice))
                {
                    priceMovie = parsedPrice;
                    parameters.Add(_priceValue);
                }
            }

            // Coletar discount corretamente
            if (query.TryGetValue("discount", out var discountValues) && discountValues.Count > 0)
            {
                discount = discountValues[0];
                if (int.TryParse(discount, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsedDiscount))
                {
                    number_discount = parsedDiscount;
                    parameters.Add(discount);
                }
            }

            // Validação do hash com logging
            if (query.TryGetValue("hash", out var hashValues) && hashValues.Count > 0)
            {
                var providedHash = hashValues[0];
                var isValid = DiscountHasher.ValidateHash(Id, parameters.ToArray(), providedHash);

                Console.WriteLine($"Parâmetros usados: {string.Join(", ", parameters)}");
                Console.WriteLine($"Hash recebido: {providedHash}");
                Console.WriteLine($"Hash válido? {isValid}");

                if (!isValid) ResetValues();
            }
            else
            {
                ResetValues();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
            ResetValues();
        }
    }

    private void ResetValues()
    {
        number_discount = 0;

    }
        
        //api
    private async Task LoadMovieData() =>
        _movie = await Http.GetFromJsonAsync<MovieDetails>($"{BaseUrl}/movie/{Id}?api_key={ApiKey}");

    private async Task LoadCredits() =>
        _credits = await Http.GetFromJsonAsync<CreditsResponse>($"{BaseUrl}/movie/{Id}/credits?api_key={ApiKey}");

    private async Task LoadKeywords() =>
        _keywords = await Http.GetFromJsonAsync<KeywordsResponse>($"{BaseUrl}/movie/{Id}/keywords?api_key={ApiKey}");

    private async Task LoadTrailer()
    {
        var videos = await Http.GetFromJsonAsync<VideosResponse>($"{BaseUrl}/movie/{Id}/videos?api_key={ApiKey}");
        var trailer = videos?.Results?.FirstOrDefault(v => v.Type == "Trailer");
        _trailerUrl = trailer != null ? $"https://www.youtube.com/embed/{trailer.Key}" : null;
    }



//claims do user
    private string GetUserId()
    {
        return claims.FirstOrDefault(c =>
            c.Type == ClaimTypes.NameIdentifier || c.Type == "sub")?.Value;
    }

    private async Task LoadClaims()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            claims = authState.User.Claims.ToList();

            userId = GetUserId();

            Console.WriteLine($"User ID: {userId}");
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }
    private string FormatRuntime(int runtime)
    {
        var hours = runtime / 60;
        var minutes = runtime % 60;
        return $"{hours}h {minutes}m";
    }    
    @* string GetPosterUrl(string posterPath)
    {
        var baseUrl = Configuration["TmdbApi:ImageBaseUrl"] ?? "https://image.tmdb.org/t/p/w500";
        return string.IsNullOrEmpty(posterPath)
            ? "https://via.placeholder.com/200x300?text=No+Image"
            : $"{baseUrl}{posterPath}";
    } *@

    string GetPosterUrl(string posterPath)
    {
        if (string.IsNullOrEmpty(posterPath))
        {
            return "https://via.placeholder.com/200x300?text=No+Image";
        }

        // Garante que o posterPath começa com /
        if (!posterPath.StartsWith("/"))
        {
            posterPath = "/" + posterPath;
        }

        var baseUrl = Configuration["TmdbApi:ImageBaseUrl"] ?? "https://image.tmdb.org/t/p/w500";
        return $"{baseUrl}{posterPath}";
    }

    public void Dispose()
    {
        // Cleanup resources if needed
    }

}