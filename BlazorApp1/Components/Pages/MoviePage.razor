@page "/movie/{Id:int}"
@inherits BlazorApp1.Components.Layout.MainLayout
@implements IDisposable
@attribute [Authorize]
@inject IUnitOfWork _unitOfWork
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@using BlazorApp1.Services.Models
@using System.Threading
@using BlazorApp1.Services
@using BlazorApp1.Services.DataBase
@using BlazorApp1.Services.OrderFiles
@using BlazorApp1.Services.Orders.Builders
@using BlazorApp1.Services.Orders.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore.Metadata.Internal

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserRepository UserRepository
@rendermode InteractiveServer

<div class="movie-container">
    @if (_movie == null)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Carregando filme...</p>
        </div>
    }
    else
    {
        <div class="movie-header" style="background-image: url('@_backdropImage');">
            <div class="header-content">
                <!-- Header Actors -->
                <div class="header-actors">
                    @if (_credits?.Cast != null)
                    {
                        @foreach (var actor in _credits.Cast.Take(2))
                        {
                            <h2>@actor.Name</h2>
                        }
                    }
                </div>

                <!-- Tagline -->
                <p class="tagline">@_movie.Tagline</p>

                <!-- Title Section -->
                <div class="movie-title-section">
                    <h1>@_movie.Title.ToUpper()</h1>
                    @if (!string.IsNullOrEmpty(_trailerUrl))
                    {
                        <a href="@_trailerUrl" target="_blank" class="btn-trailer">TRAILER</a>
                    }
                    else
                    {
                        <button class="btn-trailer" disabled>TRAILER INDISPONÍVEL</button>
                    }
                </div>
            </div>
        </div>

        <!-- Movie Details -->
        <div class="movie-details">
            <h2>@_movie.OriginalTitle</h2>

            <!-- Runtime & Relevance -->
            <div class="time-relevance">
                <span>@FormatRuntime(_movie.Runtime)</span>
                <span class="relevance">@((_movie.VoteAverage * 10).ToString("0"))% relevância</span>
            </div>

            <div class="purchase-options">
                <button class="btn-rent" @onclick="async () => await BuyAsync(PurchaseType.Aluga)">ALUGAR (2,49€)</button>
                <button class="btn-tickets" @onclick="async () => await BuyAsync(PurchaseType.Forever)">COMPRAR</button>
                <a href="/bilhetes" style="text-decoration: none;color: inherit;"><button class="btn-tickets">BILHETES</button></a>
                
            </div>

            <!-- Favorites -->
            <button class="btn-favorite">FAVORITAR</button>

            <!-- Synopsis -->
            <div class="synopsis">
                <p>@_movie.Overview</p>
            </div>

            <!-- Cast & Genre -->
            <div class="cast-genre">
                <p><strong>Elenco:</strong> @string.Join(", ", _credits?.Cast?.Take(5).Select(c => c.Name) ?? Enumerable.Empty<string>())</p>
                <p><strong>Género:</strong> @string.Join(", ", _movie.Genres.Select(g => g.Name))</p>
            </div>
        </div>

        <!-- Keywords Section -->
        <div class="keywords-section">
            <div class="keywords">
                @if (_keywords?.Keywords != null)
                {
                    @foreach (var keyword in _keywords.Keywords.Take(15))
                    {
                        <a href="/movie/@keyword.Id" class="keyword-link">
                            @keyword.Name.ToUpper()
                        </a>
                    }
                }
            </div>
        </div>
    }


</div>

@code {
   
    // Parameters
    [Parameter] public int Id { get; set; }
    private Order order;
    private User user;

    private string userId { get; set; }
    private string ApiKey = Environment.GetEnvironmentVariable("API_KEY");
    private string BaseUrl => Configuration["TmdbApi:BaseUrl"];
    private string ImageBaseUrl => Configuration["TmdbApi:ImageBaseUrl"];

    private List<Claim> claims = new();

    

    
    
    // State
    private MovieDetails _movie;
    private CreditsResponse _credits;
    private KeywordsResponse _keywords;
    private string _trailerUrl;
    

    private string _backdropImage => string.IsNullOrEmpty(_movie?.backdrop_path)
        ? null
        : $"{ImageBaseUrl}{_movie.backdrop_path}";
    
    public enum PurchaseType
    {
        Aluga,
        Forever
    }
private async Task BuyAsync(PurchaseType type)
{
    try
    {
        if (!int.TryParse(userId, out var userIdInt)) return;

        user = await _unitOfWork.Users.GetByIdAsync(userIdInt);
        if (user?.Addresses == null || user.Addresses.Count == 0)
        {
            Console.WriteLine("Tem que inserir morada primeiro");
            Navigation.NavigateTo("/perfilAdmin");
            return;
        }

        // Obter morada principal
        var shippingAddress = user.Addresses.FirstOrDefault(a => a.IstheOne);
        if (shippingAddress == null)
        {
            Console.WriteLine("Nenhum endereço principal encontrado.");
            return;
        }

        // Parâmetros específicos do tipo de compra
        var (price, screeningDate) = type switch
        {
            PurchaseType.Aluga => (2.49, DateTime.UtcNow.AddDays(1)),
            PurchaseType.Forever => (9.99, DateTime.UtcNow),
            _ => throw new ArgumentException("Tipo de compra inválido")
        };

        // Verificar encomenda existente
        var existingOrder = await _unitOfWork.Orders.GetActiveOrderWithItemsAsync(userIdInt);

        var title = _movie?.Title ?? "Sem Título";
        var posterUrl = _backdropImage ?? "Poster não definido";

        if (existingOrder != null)
        {
            // Adicionar item à encomenda existente
            existingOrder.Basket.Items.Add(new BasketItem
            {
                MovieId = Id,
                MovieTitle = title,
                MoviePosterUrl = posterUrl,
                Quantity = 1,
                ScreeningDate = screeningDate,
                Price = price,
                Type = TicketType.Digital
            });

            await _unitOfWork.Orders.UpdateAsync(existingOrder);
        }
        else
        {
            // Criar nova encomenda
            var orderBuilder = new OrderBuilder()
                .WithUserId(userIdInt)
                .WithNumber(type == PurchaseType.Aluga ? Id.ToString() : Guid.NewGuid().ToString())
                .WithDate(DateTime.UtcNow)
                .WithShippingAddress(a => a
                    .WithStreet(shippingAddress.Street)
                    .WithNumber(shippingAddress.Number)
                    .WithCity(shippingAddress.City)
                    .WithState(shippingAddress.State)
                    .WithZipCode(shippingAddress.ZipCode)
                    .WithCountry(shippingAddress.Country)
                    .WithUser(user))
                .WithBasket(b => b
                    .WithDigitalTicket(
                        movieId: Id,
                        title: title,
                        posterUrl: posterUrl,
                        quantity: 1,
                        screeningDate: screeningDate,
                        price: price));

            if (type == PurchaseType.Forever)
            {
                orderBuilder.WithOrderStatus(OrderStatus.Pending);
            }

            await _unitOfWork.Orders.AddAsync(orderBuilder.Build());
        }

        await _unitOfWork.CommitAsync();
        Navigation.NavigateTo("/basket");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Erro em BuyAsync: {ex.Message}");
    }
}

    
    




    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadClaims();
            await LoadMovieData();
            await LoadCredits();
            await LoadKeywords();
            await LoadTrailer();
 
           
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
    }
    //api
    private async Task LoadMovieData() =>
        _movie = await Http.GetFromJsonAsync<MovieDetails>($"{BaseUrl}/movie/{Id}?api_key={ApiKey}");

    private async Task LoadCredits() =>
        _credits = await Http.GetFromJsonAsync<CreditsResponse>($"{BaseUrl}/movie/{Id}/credits?api_key={ApiKey}");

    private async Task LoadKeywords() =>
        _keywords = await Http.GetFromJsonAsync<KeywordsResponse>($"{BaseUrl}/movie/{Id}/keywords?api_key={ApiKey}");

    private async Task LoadTrailer()
    {
        var videos = await Http.GetFromJsonAsync<VideosResponse>($"{BaseUrl}/movie/{Id}/videos?api_key={ApiKey}");
        var trailer = videos?.Results?.FirstOrDefault(v => v.Type == "Trailer");
        _trailerUrl = trailer != null ? $"https://www.youtube.com/embed/{trailer.Key}" : null;
    }



//claims do user
    private string GetUserId()
    {
        return claims.FirstOrDefault(c =>
            c.Type == ClaimTypes.NameIdentifier || c.Type == "sub")?.Value;
    }

    private async Task LoadClaims()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            claims = authState.User.Claims.ToList();

            userId = GetUserId();

            Console.WriteLine($"User ID: {userId}");
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }
    private string FormatRuntime(int runtime)
    {
        var hours = runtime / 60;
        var minutes = runtime % 60;
        return $"{hours}h {minutes}m";
    }    
    public void Dispose()
    {
        // Cleanup resources if needed
    }

}