@page "/movie/{movieId:int}"

@using System.Globalization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorApp1.Services
@using BlazorApp1.Services.Actor
@using BlazorApp1.Services.DataBase
@using BlazorApp1.Services.DataBase.DBEntities
@using BlazorApp1.Services.DataBase.DBEntities.BasketItems
@using BlazorApp1.Services.DataBase.DBEntities.Builders
@using BlazorApp1.Services.DataBase.DBEntities.Enum
@using BlazorApp1.Services.Models
@using BlazorApp1.Services.Models.Keywords
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using KeywordsResponse = BlazorApp1.Services.Models.Keywords.KeywordsResponse

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IUnitOfWork _unitOfWork
@inject IAddItemService addItemService

@rendermode InteractiveServer

<section class="movie-details-section">
</section>
<div class="movie-background" style="background-image: url('@_backdropImage');"></div>
<div class="movie-background-overlay"></div>

<div class="movie-container">
    @if (_movie == null)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Carregando filme...</p>
        </div>
    }
    else
    {
        <div class="movie-details-layout">
            <div class="left-column">
                <img class="movie-poster" src="@($"{ImageBaseUrl}{_movie.poster_path}")" alt="Capa do filme" />
                @if (!string.IsNullOrEmpty(_trailerUrl))
                {
                    <a href="@_trailerUrl" target="_blank" class="btn-trailer">Ver Trailer</a>
                }
            </div>

            <div class="right-column">
                <h1 class="movie-title">@_movie.Title.ToUpper()</h1>

                <div class="time-relevance">
                    <span>@FormatRuntime(_movie.Runtime)</span>
                    <span class="relevance">@((_movie.VoteAverage * 10).ToString("0"))% relevância</span>
                </div>
                @if (!string.IsNullOrEmpty(_trailerUrl))
                {
                    <div class="social-sharing">
                        <span class="share-label">Compartilhar:</span>
                        <a class="share-icon facebook-icon" href="https://www.facebook.com/sharer/sharer.php?u=@Uri.EscapeDataString(_trailerUrl)" target="_blank">
                            <i class="fab fa-facebook"></i>
                        </a>
                        <a class="share-icon twitter-icon" href="https://twitter.com/intent/tweet?url=@Uri.EscapeDataString(_trailerUrl)&text=Confira%20o%20trailer%20de%20@Uri.EscapeDataString(_movie.Title)" target="_blank">
                            <i class="fab fa-twitter"></i>
                        </a>
                        <a class="share-icon instagram-icon" href="https://www.instagram.com/?url=@Uri.EscapeDataString(_trailerUrl)" target="_blank">
                            <i class="fab fa-instagram"></i>
                        </a>
                    </div>
                }
                <div class="purchase-buttons">
                    <button class="btn-rent" @onclick="Rent">ALUGAR</button>
                    <button class="btn-buy" @onclick="Buy">COMPRAR</button>
                    <a href="@($"/cinemas?movieId={movieId}")"><button class="btn-tickets">BILHETES</button></a>
                </div>

                <div class="synopsis">
                    <p>@_movie.Overview</p>
                </div>

                <button class="btn-favorite">FAVORITE</button>

                @if (_credits?.Cast != null)
                {
                    <div class="cast-genre">
                        <h3>Elenco:</h3>
                        <ul>
                            @foreach (var member in _credits.Cast.OrderBy(c => c.Order).Take(5))
                            {
                                <li>
                                    <a href="/actor/@member.PersonId">@member.Name</a>
                                    <span class="character">(@member.Character)</span>
                                </li>
                            }
                        </ul>
                    </div>
                }
                <p><strong>Género:</strong> @string.Join(", ", _movie.Genres.Select(g => g.Name))</p>
            </div> 
        </div> 

        @foreach (var keyword in _keywords.Keywords.Take(10))
        {
            <a href="#" @onclick="async () => await NavigateToMovieByName(keyword.Name)" class="keyword-tag">
                @keyword.Name.ToUpper()
            </a>
            <br>
        }

        @if (!string.IsNullOrEmpty(discount))
        {
            <div class="discount-banner">
                Promoção Ativa: @discount
            </div>
            <p>Numero : @number_discount</p>
            <p>Preco: @priceMovie %</p>
        }
        else
        {
            <p>Não houve desconto</p>
        }
    }
</div> 
@code {
    
    [Parameter] public int movieId { get; set; }
    private Order order;
    private User user;

    private Guid userId { get; set; }
    private string _posterUrl;
    private string ApiKey = Environment.GetEnvironmentVariable("API_KEY");
    private string LinkImage => Configuration["TmdbApi:ImageBaseUrl"] ?? string.Empty;
    private string BaseUrl => Configuration["TmdbApi:BaseUrl"];
    private string ImageBaseUrl => Configuration["TmdbApi:ImageBaseUrl"];
    private KeywordsResponse _keywords;
    private List<Claim> claims = new();

    private MovieDetails _movie;
    private CreditsResponse _credits;

    private string _trailerUrl;
    private string? discount;
    private int number_discount;
    private int desconto;

    private string? _priceValue;
    private double priceMovie;
    private string _backdropImage => string.IsNullOrEmpty(_movie?.backdrop_path) ? null : $"{ImageBaseUrl}{_movie.backdrop_path}";
    

    private void Rent()
    {
        addItemService.AddRentalMovie(movieId, userId, priceMovie, number_discount);
    }

    private void Buy()
    {
        addItemService.AddDigitalMovie(movieId, userId, priceMovie, number_discount);
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadClaims();
            await LoadMovieData();
            await LoadCredits();
            await LoadKeywords();
            await LoadTrailer();
            AddMovieToDb(movieId);
            
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            var parameters = new List<string>();
            
            if (query.TryGetValue("price", out var priceValues) && priceValues.Count > 0)
            {
                _priceValue = priceValues[0];
                if (double.TryParse(_priceValue, NumberStyles.Any, CultureInfo.InvariantCulture, out var parsedPrice))
                {
                    priceMovie = parsedPrice;
                    parameters.Add(_priceValue);
                }
            }

            if (query.TryGetValue("discount", out var discountValues) && discountValues.Count > 0)
            {
                discount = discountValues[0];
                if (int.TryParse(discount, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsedDiscount))
                {
                    number_discount = parsedDiscount;
                    parameters.Add(discount);
                }
            }

            if (query.TryGetValue("hash", out var hashValues) && hashValues.Count > 0)
            {
                var providedHash = hashValues[0];
                var isValid = DiscountHasher.ValidateHash(movieId, parameters.ToArray(), providedHash);

                Console.WriteLine($"Parâmetros usados: {string.Join(", ", parameters)}");
                Console.WriteLine($"Hash recebido: {providedHash}");
                Console.WriteLine($"Hash válido? {isValid}");

                if (!isValid) ResetValues();
            }
            else
            {
                ResetValues();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
            ResetValues();
        }
    }
    

    private void ResetValues()
    {
        number_discount = 0;
    }
    
    private async Task LoadMovieData()
    {
        _movie = await Http.GetFromJsonAsync<MovieDetails>($"{BaseUrl}/movie/{movieId}?api_key={ApiKey}");
    }
    private async Task UpdateKeywordIdsAsync()
    {
        if (_keywords?.Keywords == null || !_keywords.Keywords.Any()) return;

        foreach (var keyword in _keywords.Keywords)
        {
            var keywordId = await GetMovieIdByNameAsync(keyword.Name);
            if (keywordId.HasValue)
            {
                keyword.Id = keywordId.Value;
            }
        }
    }
    private async Task<int?> GetMovieIdByNameAsync(string movieName)
    {
        if (string.IsNullOrWhiteSpace(movieName)) return null;

        try
        {
            var encodedName = Uri.EscapeDataString(movieName);
            var url = $"{BaseUrl}/search/movie?api_key={ApiKey}&query={encodedName}";

            var response = await Http.GetFromJsonAsync<MovieSearchResponse>(url);
            var movie = response?.Results?.FirstOrDefault();

            return movie?.Id;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar ID do filme '{movieName}': {ex.Message}");
            return null;
        }
    }
    private async Task NavigateToMovieByName(string keywordName)
    {
        var movieId = await GetMovieIdByNameAsync(keywordName);
        if (movieId.HasValue)
        {
            Navigation.NavigateTo($"/movie/{movieId.Value}");
        }
        else
        {
            Console.WriteLine("Filme não encontrado para a palavra-chave.");
        }
    }
    private async Task LoadKeywords()
    {
        _keywords = await Http.GetFromJsonAsync<KeywordsResponse>($"{BaseUrl}/movie/{movieId}/keywords?api_key={ApiKey}");
        await UpdateKeywordIdsAsync();
    }
    private async Task LoadCredits()
    {

        var url = $"{BaseUrl}/movie/{movieId}/credits?api_key={ApiKey}";
        _credits = await Http.GetFromJsonAsync<CreditsResponse>(url);
    }
    private async Task LoadTrailer()
    {
        var videos = await Http.GetFromJsonAsync<VideosResponse>($"{BaseUrl}/movie/{movieId}/videos?api_key={ApiKey}");
        var trailer = videos?.Results?.FirstOrDefault(v => v.Type == "Trailer");
        _trailerUrl = trailer != null ? $"https://www.youtube.com/embed/{trailer.Key}" : null;
    }

    private string GetUserId()
    {
        return claims.FirstOrDefault(c =>
            c.Type == ClaimTypes.NameIdentifier || c.Type == "sub")?.Value;
    }

    private async Task LoadClaims()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            claims = authState.User.Claims.ToList();

            userId = Guid.Parse(GetUserId());

            Console.WriteLine($"User ID: {userId}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar claims: {ex.Message}");
        }
    }

    private string FormatRuntime(int runtime)
    {
        var hours = runtime / 60;
        var minutes = runtime % 60;
        return $"{hours}h {minutes}m";
    }

    string GetPosterUrl(string posterPath)
    {
        if (string.IsNullOrEmpty(posterPath))
        {
            return "https://via.placeholder.com/200x300?text=No+Image";
        }

        if (!posterPath.StartsWith("/"))
        {
            posterPath = "/" + posterPath;
        }

        var baseUrl = Configuration["TmdbApi:ImageBaseUrl"] ?? "https://image.tmdb.org/t/p/w500";
        return $"{baseUrl}{posterPath}";
    }

    private void AddMovieToDb(int movieId)
    {
        bool isInDb = _unitOfWork.GetRepository<Movie>().GetWithQuery(q =>
            q.Where(m => m.ApiId == movieId)
        ).Any();

        if (!isInDb && _movie != null) 
        {
            Movie movie = new Movie
            {
                ApiId = movieId,
                MovieTitle = _movie.Title,
                MoviePosterUrl = _backdropImage
            };
            _unitOfWork.GetRepository<Movie>().Add(movie);
            _unitOfWork.Commit();
        }
    }
}