@page "/perfilAdmin"
@layout MainLayout
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services.RegLogin
@using System.Globalization
@using System.Security.Claims
@using BlazorApp1.Services
@using BlazorApp1.Services.Address
@using BlazorApp1.Services.DataBase
@using BlazorApp1.Services.Orders.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject IAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider
@inject IUnitOfWork _unitOfWork
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<div class="page-container">
    <div class="grid-container">
        <div class="grid-item horizontal" style="grid-column: span 1; grid-row: span 1">
            
            <div class="vertical" style="display: flex; gap: 10px; width: 100%">
                Total visto: <br/>
                <div class="horizontal" style="display: flex; gap: 10px; margin-top: auto">
                    <h3>@totalVisto</h3>
                    <p>minutos</p>
                </div>
                
            </div>
            <!-- Hardcoded -->
            <div>
                logo
            </div>
            <!--  -->
            
        </div>
        <div class="grid-item horizontal" style="grid-column: span 1; grid-row: span 1">
            <div class="vertical" style="display: flex; gap: 10px; width: 100%; justify-content: space-between">
                Metodo de Pagamento:
                
                <h3>@paymentMethod</h3>
            </div>
            <!-- Hardcoded -->
            <div>
                logo
            </div>
            <!--  -->
            
        </div>
        <div class="grid-item horizontal" style="grid-column: span 1; grid-row: span 1">
            <div class="vertical" style="display: flex; gap: 10px; width: 100%; justify-content: space-between">
                Valor total em compra:

                <h3>@totalPay€</h3>
            </div>
            
            <!-- Hardcoded -->
            <div>
                logo
            </div>
            <!--  -->
            
        </div>

        <div class="grid-item vertical" style="grid-column: span 2; grid-row: span 2">
            Visto este mês:

            <!-- Hardcoded -->
            <div style="display: flex; justify-content: center; align-content: center">
                lista de séries
            </div>
            <!-- -->
            
        </div>
        <div class="grid-item vertical" style="grid-column: span 1; grid-row: span 2">
            Géneros:
            
            <!-- Hardcoded -->
            <div style="display: flex; justify-content: center; align-content: center">
                display do grafico
            </div>
            <!--  -->
            
        </div>

        <div class="grid-item" style="grid-column: span 2; grid-row: span 2">
            

            As tuas moradas:
            <div style="display: flex; flex-direction: column; gap: 10px; margin-top: 10px; overflow: auto">
                @if (userEntity == null || userEntity.Addresses == null || userEntity.Addresses.Count == 0)
                {
                    <div style="text-align: center; font-style: italic;">Nenhuma morada encontrada.</div>
                }else{
                @foreach (var address in userEntity.Addresses)
                {
                    bool isSelected = moradaSelecionada == address;

                    <div style="display: flex; align-items: center; gap: 10px;">
                        <!-- Botón estilo radio -->
                        <button @onclick="@(() => SelecionarMorada(address))"
                                style="
                                    width: 20px;
                                    height: 20px;
                                    border-radius: 50%;
                                    border: 2px solid #2196F3;
                                    background-color: @(isSelected ? "#2196F3" : "transparent");
                                cursor: pointer;
                                display: inline-block;">
                        </button>

                        <!-- Tarjeta de morada -->
                        <div style="
                            flex-grow: 1;
                            border: 2px solid @(isSelected ? "#2196F3" : "#ccc");
                        border-radius: 8px;
                        padding: 10px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                        background-color: @(isSelected ? "#e3f2fd" : "white");
                        ">

                            <div><strong>País:</strong> @address.Country</div>
                            <div><strong>Cidade:</strong> @address.City</div>
                            <div><strong>Numero:</strong> @address.Number</div>
                            <div><strong>Rua:</strong> @address.Street</div>
                            <div><strong>Distrito:</strong> @address.State</div>
                            <div><strong>Zip-Code:</strong> @address.ZipCode</div>

                            }

                        </div>
                    </div>
                }
                }
            </div>
        </div>
        <div class="grid-item" style="grid-column: span 1; grid-row: span 2; overflow: auto">
            Histórico de Compras:
            @foreach (var purchase in purchaseHistory)
            {
                <div class="compraDiv horizontal" style="margin: 5px 0">
                    <div class="vertical" style="width: 100%; gap: 10px">
                        <div ><strong>@purchase.Name</strong> </div>
                        <div class="smallFont">@purchase.Date - @purchase.Type </div>
                    </div>
                    
                    <div style="align-items: flex-end; justify-content: flex-end;">
                        <strong>@purchase.Price€</strong>
                    </div>
                </div>
            }
        </div>
    </div>
    <div>
        <EditForm Model="Model" OnValidSubmit="AddAddress" FormName="address-form" class="Addressform">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Rua</label>
                <InputText @bind-Value="Model!.Street" class="form-control" placeholder="Rua" />
            </div>

            <div class="form-group">
                <label>Número</label>
                <InputText @bind-Value="Model!.Number" class="form-control" placeholder="Número" />
            </div>

            <div class="form-group">
                <label>Código Postal</label>
                <InputText @bind-Value="Model!.ZipCode" class="form-control" placeholder="0000-000" />
            </div>

            <div class="form-group">
                <label>Cidade</label>
                <InputText @bind-Value="Model!.City" class="form-control" placeholder="Cidade" />
            </div>

            <div class="form-group">
                <label>Estado/Distrito</label>
                <InputText @bind-Value="Model!.State" class="form-control" placeholder="Estado ou distrito" />
            </div>

            <div class="form-group">
                <label>País</label>
                <InputText @bind-Value="Model!.Country" class="form-control" placeholder="País" />
            </div>

            <button type="submit" class="loginsub">Guardar Endereço</button>
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm] 
    private AddressModel? Model { get; set; } = new();
   
    private string userId { get; set; } = string.Empty;
    public string totalVisto = "525.678";
    public string paymentMethod = "MBWay";
    public string totalPay = "32.99";
    
    
    private List<Claim> claims = new();
    private User userEntity { get; set; }
    protected override async Task OnInitializedAsync()
    {

        await LoadClaims();
        StateHasChanged();

    }
    private string GetUserId()
    {
        return claims.FirstOrDefault(c =>
            c.Type == ClaimTypes.NameIdentifier || c.Type == "sub")?.Value;
    }
    private async Task LoadClaims()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            claims = authState.User.Claims.ToList();
            userId = GetUserId();

            if (!int.TryParse(userId, out var userIdInt)) return;
            await using var _context = await DbContextFactory.CreateDbContextAsync();
            userEntity = await _unitOfWork.Users.GetByIdAsync(userIdInt);
        
            // Carregamento explícito se necessário
            if (userEntity != null && userEntity.Addresses == null)
            {
                await _context.Entry(userEntity)
                    .Collection(u => u.Addresses)
                    .LoadAsync();
            }

            // Carrega a morada ativa
            moradaSelecionada = userEntity?.Addresses?.FirstOrDefault(a => a.IstheOne);
        
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
    public List<Purchase> purchaseHistory = new List<Purchase>
    {
        new Purchase { Name = "Filme 1", Date = "15/05/2023", Type = "Digital", Price = "9.99" },
        new Purchase { Name = "Filme 2", Date = "10/05/2023", Type = "Blu-ray", Price = "12.50" },
        new Purchase { Name = "Filme 3", Date = "03/05/2023", Type = "Streaming", Price = "7.99" }
    };

    public class Purchase
    {
        public string Name { get; set; }
        public string Date { get; set; }
        public string Type { get; set; }
        public string Price { get; set; }
    }
    
    public Adress moradaSelecionada;


   private async Task SelecionarMorada(Adress address)
    {
        try
        {
            // Desativa todas as moradas
            foreach (var addr in userEntity.Addresses)
            {
                addr.IstheOne = false;
            }
        
            // Ativa a nova morada
            address.IstheOne = true;
            moradaSelecionada = address;

            // Atualiza no banco
            await _unitOfWork.CommitAsync(); // Adicione esta linha
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
    private async Task AddAddress()
    {
        try
        {
            var newAddress = new Adress 
            {
                Street = Model.Street,
                Number = Model.Number,
                ZipCode = Model.ZipCode,
                City = Model.City,
                State = Model.State,
                Country = Model.Country,
                UserId = userEntity.Id,
                IstheOne = userEntity.Addresses.Count == 0
            };

             _unitOfWork.Users.AddAddress(userEntity, newAddress);
            userEntity = await _unitOfWork.Users.GetByIdAddressAsync(userEntity.Id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }

}