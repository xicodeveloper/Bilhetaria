@layout EmptyLayout
@page "/editProfile/{Username}"
@using System.Security.Claims
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services.DataBase.DBEntities
@using BlazorApp1.Services.RegLogin
@using Microsoft.AspNetCore.Authorization
@inject IAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
@inject CustomAuthStateProvider AuthStateProvider
@attribute [Authorize]

<div></div>

<div class="page-container">
    <img src="/img/popcorn.png" class="popcorn" alt="CinUMa Logo">
    <div class="edit-container">
        <!-- Left Side -->
        <div class="left-side">
            <div class="profile-section">
                <a href="/" class="back-link">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                        <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" 
                              stroke="white" 
                              stroke-width="2"
                              stroke-linecap="round" 
                              stroke-linejoin="round"/>
                        <path d="M12 8L8 12L12 16" 
                              stroke="white" 
                              stroke-width="2"
                              stroke-linecap="round" 
                              stroke-linejoin="round"/>
                        <path d="M16 12H8" 
                              stroke="white" 
                              stroke-width="2"
                              stroke-linecap="round" 
                              stroke-linejoin="round"/>
                    </svg>
                    VOLTAR
                </a>
                
                <div class="user-profile">
                    <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 24 24" fill="none">
                        <path d="M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21" 
                              stroke="#F3A529" 
                              stroke-width="2"
                              stroke-linecap="round" 
                              stroke-linejoin="round"/>
                        <path d="M12 11C14.2091 11 16 9.20914 16 7C16 4.79086 14.2091 3 12 3C9.79086 3 8 4.79086 8 7C8 9.20914 9.79086 11 12 11Z" 
                              stroke="#F3A529" 
                              stroke-width="2"
                              stroke-linecap="round" 
                              stroke-linejoin="round"/>
                    </svg>
                    <div class="user-info"  onclick="window.location.href='/perfilAdmin'" style="cursor: pointer;">
                        <h2><a style="text-decoration: none; color: inherit; ">@currentUser.Username</a></h2>
                        <span class="profile-label" href="/perfilAdmin">Perfil</span>
                    </div>
                </div>

                <div class="discounts">
                    <h3>Os teus descontos</h3>
                    <div class="discount-item">
                        <span>50% em toda a saga da Pixar</span>
                        <div class="separator"></div>
                    </div>
                    <div class="discount-item">
                        <span>4,99€ em toda a saga Harry Potter</span>
                        <div class="separator"></div>
                    </div>
                    <div class="discount-item">
                        <span>20% na próxima compra</span>
                        <div class="separator"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side -->
        <div class="right-side">

            <EditForm Model="MyModel" OnValidSubmit="HandleValidSubmit" class="edit-profile" FormName="Form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Nome de utilizador</label>
                    <InputText @bind-Value="MyModel.Username" class="form-input" placeholder="@Username" />
                </div>

                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="MyModel.Email" class="form-input" placeholder="@EmailUser" />
                </div>

                <div class="form-group">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="MyModel.NewPassword" class="form-input" placeholder="******" />
                </div>

                <button type="submit" class="save-btn">SALVAR ALTERAÇÕES</button>
            </EditForm>
        </div>
    </div>
</div>
@code
{
[Parameter]
    public string Username { get; set; }
    [SupplyParameterFromForm]
    private EditModel MyModel { get; set; } = new EditModel();
    private string errorMessage = string.Empty;
    private string errorDetails = string.Empty;
    private bool showDetails = false;
    private User currentUser = new();
    private string EmailUser;
    private bool isSameUsername;
    
    protected override void OnInitialized()
    {
        currentUser = AuthService.FindUserByUsername(Username);
        isSameUsername = currentUser.Username == Username;
        EmailUser = currentUser.Email;
        Console.WriteLine(currentUser);
        if (currentUser != null)
        {
            MyModel = new EditModel 
            {
                Username = MyModel.Username,
                Email = MyModel.Email
            };
            StateHasChanged();
           
        }
        else
        {
            HttpContextAccessor.HttpContext?.Response.Redirect("/error");
        }
    }
   
    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        errorDetails = string.Empty;
        showDetails = false;

        try
        {
            Console.WriteLine("Formulário Recebido:");
            Console.WriteLine($"Username: {MyModel.Username}");
            Console.WriteLine($"Email: {MyModel.Email}");
            Console.WriteLine($"Nova Password: {MyModel.NewPassword}");

           var update = AuthService.UpdateUser(
               currentUser.Id,
                MyModel.Username,
                MyModel.Email,
                MyModel.NewPassword,
                isSameUsername
            );

            if (update)
            {
                var newClaims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, MyModel.Username),
                    new Claim(ClaimTypes.Email, MyModel.Email)
                };
                var newIdentity = new ClaimsIdentity(newClaims, "Cookies");
                var newPrincipal = new ClaimsPrincipal(newIdentity);
                
                await AuthStateProvider.UpdateAuthenticationStateAsync(newPrincipal);
                HttpContextAccessor.HttpContext?.Response.Redirect("/");
            }
            else
            {
                errorMessage = "Erro ao atualizar o utilizador.";
                showDetails = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado";
            errorDetails = ex.Message;
            showDetails = true;
        }
    }
    
}