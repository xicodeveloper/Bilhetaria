@layout EmptyLayout
@page "/confirmar-email"
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services.RegLogin
@inject IAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
<div class="page-container">
    <img src="/img/popcorn.png" class="popcorn" alt="CinUMa Logo">
    <div class="login-container">
        <h1 class="title-login">CÍNUMO</h1>
        <span class="subtitle-login">
            Confirme seu e-mail para<br>
            continuar o acesso!
        </span>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
                @if (showDetails)
                {
                    <div class="mt-2 small">@errorDetails</div>
                }
            </div>
        }

        <EditForm Model="confirmationModel" OnValidSubmit="@HandleConfirmation" FormName="confirm-email" class="loginform">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>E-mail</label>
                <InputText @bind-Value="confirmationModel!.Email"
                           class="form-control"
                           placeholder="exemplo@email.com" />
            </div>

            <div class="form-group">
                <label>Código de Confirmação</label>
                <InputText @bind-Value="confirmationModel!.Code"
                           class="form-control"
                           placeholder="Digite o código recebido" />
            </div>

            <button type="submit" class="loginsub">VERIFICAR CÓDIGO</button>
        </EditForm>

        <div class="mt-3">
            <span>Não recebeu o código?</span>
            <br><a href="/reenviar-codigo">Reenviar código de confirmação</a>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ConfirmationModel? confirmationModel { get; set; } = new();

    private string errorMessage = string.Empty;
    private string errorDetails = string.Empty;
    private bool showDetails = false;

    private async Task HandleConfirmation()
    {
        try
        {
            var success = AuthService.VerifyUser(
                confirmationModel!.Email,
                confirmationModel.Code
            );

            if (success)
            {
                HttpContextAccessor.HttpContext.Response.Redirect("/login");
            }
            else
            {
                errorMessage = "Código inválido ou expirado!";
                errorDetails = "Verifique o código digitado ou solicite um novo código";
                showDetails = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro na confirmação do e-mail";
            errorDetails = ex.Message;
            showDetails = true;
            Console.WriteLine(ex.StackTrace);
        }
    }
}