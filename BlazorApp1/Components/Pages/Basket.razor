@page "/basket"
@using System.Security.Claims
@using BlazorApp1.Services.DataBase
@using BlazorApp1.Services.OrderFiles
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IOrderRepository OrderRepository
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@attribute [Authorize]
@* Components/Pages/Basket.razor *@
@using BlazorApp1.Services.Orders.Models // Adicionar para Order


<div class="basket-container">
    <h1>Carrinho</h1>
    <a href="/" style="text-decoration: none; color: inherit">
        <button class="back-btn">Continua a Comprar</button>
    </a>
    <div class="basket-items">
        @if (currentOrder == null)
        {
            <p>Carregando...</p>
        }
        else if (!currentOrder.Basket.Items.Any())
        {
            <p>O seu carrinho está vazio.</p>
        }
        else
        {
            @foreach (var item in currentOrder.Basket.Items)
            {
                <div class="item-card">
                    <div class="item-header">
                        <img src="@item.MoviePosterUrl" alt="Poster do filme" />
                        <h3 class="item-title">@item.MovieTitle</h3>
                        <span class="item-price">@($"{item.Quantity * item.Price:F2}€")</span>
                    </div>
                    <p class="item-type">@GetTicketLabel(item.Type)</p>
                    <div class="quantity-controls">
                        <button class="quantity-btn" @onclick="@(() => UpdateQuantity(item.BasketId, -1))">-</button>
                        <span class="quantity-display">@item.Quantity</span>
                        <button class="quantity-btn" @onclick="@(() => UpdateQuantity(item.BasketId, 1))">+</button>
                    </div>
                </div>
            }

            <div class="total-section">
                <button class="clear-btn" @onclick="ClearBasket">Limpar Carrinho</button>
                <div class="checkout-box">
                    <p class="total-price">Total: @($"{currentOrder.Basket.Items.Sum(i => i.Price * i.Quantity):F2}€")</p>
                    <button class="checkout-btn" @onclick="ProceedToCheckout">Checkout</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private Order currentOrder;
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);

        //currentOrder = await OrderRepository.GetActiveOrderAsync(userId);
    }

    private string GetTicketLabel(TicketType type)
    {
        return type == TicketType.Digital ? "Aluguer (Digital)" : "Bilhete Físico";
    }

    private async Task UpdateQuantity(int itemId, int change)
    {
        var item = currentOrder.Basket.Items.FirstOrDefault(i => i.BasketId == itemId);
        if (item != null)
        {
            item.Quantity += change;
            
            if (item.Quantity < 1)
            {
                currentOrder.Basket.Items.Remove(item);
            }
            
            await OrderRepository.UpdateAsync(currentOrder);
          //  currentOrder = await OrderRepository.GetActiveOrderAsync(userId);
        }
    }

    private async Task ClearBasket()
    {
        currentOrder.Basket.Items.Clear();
        await OrderRepository.UpdateAsync(currentOrder);
        //currentOrder = await OrderRepository.GetActiveOrderAsync(userId);
    }

    private void ProceedToCheckout()
    {
        Navigation.NavigateTo("/checkout");
    }
}