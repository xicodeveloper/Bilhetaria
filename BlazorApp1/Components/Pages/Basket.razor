@page "/basket"
@using System.Security.Claims
@using BlazorApp1.Services.DataBase
@using BlazorApp1.Services.OrderFiles
@using BlazorApp1.Services.Orders.Models
@using BlazorApp1.Services.Discounts
@using BlazorApp1.Services.RegLogin
@inject IUnitOfWork _UnitOfWork
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="basket-container">
    <h1>Carrinho</h1>
    
    <div class="basket-items">
        @if (order != null)
        {
            @foreach (var item in order.Basket.Items)
            {
                <div class="item-card" key="@item.MovieId">
                    <div class="item-header">
                        <img src="@item.MoviePosterUrl" alt="Poster do filme"/>
                        <h3 class="item-title">@item.MovieTitle (@item.Type.ToString())</h3>
                        <div class="item-price">
                            @if (item.Discount > 0)
                            {
                                <s class="original-price">@(item.Price.ToString("0.00"))€</s>
                            }
                            <span class="discounted-price">@(GetDiscountedPrice(item).ToString("0.00"))€</span>
                        </div>
                    </div>
                    <p class="item-type">@item.Type.ToString()</p>
                    <div class="quantity-controls">
                        <button class="quantity-btn" @onclick="(() => UpdateQuantity(item, -1))">-</button>
                        <span class="quantity-display">@item.Quantity</span>
                        <button class="quantity-btn" @onclick="(() => UpdateQuantity(item, 1))">+</button>
                        <button type="button" class="remove-btn" @onclick="async () => await RemoverUnidade(item)">Remove</button>
                    </div>
                </div>
            }

            <div class="total-section">
                <button class="clear-btn" @onclick="ClearBasket">Limpar Carrinho</button>
                <div class="checkout-box">
                    <p class="total-price">Total: @(order.Basket.Items.Sum(i => GetDiscountedPrice(i) * i.Quantity).ToString("0.00"))€</p>
                    <button class="checkout-btn" @onclick="Pagamento">Checkout</button>
                </div>
            </div>
        }
        else
        {
            <p>Carrinho vazio</p>
        }
    </div>
</div>

@code {
    private Order order;
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        userId = await AuthService.GetUserId();
        
        if (userId != 0 )
        {
             order = (await _UnitOfWork.Orders.GetActiveOrderWithItemsAsync(userId));
        }
    }

    private double GetDiscountedPrice(BasketItem item)
    {
        IStrategyDiscount strategy = item.Discount switch
        {
            10 => new TenDiscount(),
            25 => new TwentyFiveDiscount(),
            70 => new SeventyDiscount(),
            _ when item.Discount > 0 => new GenericDiscount(item.Discount),
            _ => new WithoutDiscount()
        };

        ApplyDiscoutStrategy applier = new ApplyDiscoutStrategy(strategy);
        return applier.ApplyDiscount(item.Price);
    }

    private async Task UpdateQuantity(BasketItem item, int change)
    {
        item.Quantity += change;
        
        if (item.Quantity < 1) item.Quantity = 1;
        
        await _UnitOfWork.Orders.UpdateAsync(order);
        StateHasChanged();
    }
    
    private async Task RemoverUnidade(BasketItem item)
    {
        try
        {
            await _UnitOfWork.Orders.RemoveBasketItemAsync(item.Id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao remover unidade: {ex.Message}");
        }
    }

    private async Task ClearBasket()
    {
        await _UnitOfWork.Orders.ClearBasketAsync(order.Id);
        order = null;
        StateHasChanged();
    }
    
    

    private async Task Pagamento()
    {
        if (order != null)
        {
            NavigationManager.NavigateTo("/pagamentoFinal");
        }
    }
}