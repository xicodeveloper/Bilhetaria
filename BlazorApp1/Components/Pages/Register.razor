@page "/register"
@using BlazorApp1.Services.RegLogin
@using Microsoft.AspNetCore.Components.Authorization
@inject Sign AuthService
@inject NavigationManager Navigator
@inject IConfiguration Config
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="user-register">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label>Username</label>
        <InputText @bind-Value="Model!.Username" class="form-control" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="Model!.Email" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="Model!.Password" class="form-control" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
            @if (showDetails)
            {
                <div class="mt-2 small">@errorDetails</div>
            }
        </div>
    }
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private RegistrationModel? Model { get; set; }

    private string errorMessage = string.Empty;
    private string errorDetails = string.Empty;
    private bool showDetails = false;
    private async Task RedirectExternal()
    {
        await JSRuntime.InvokeVoidAsync("window.location.href = '/login'");
    }
    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        
      
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine(authState.User.Identity);
        if (authState.User.Identity.IsAuthenticated)
        {
            Navigator.NavigateTo("/home");
        }
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        errorDetails = string.Empty;
        showDetails = false;

        try
        {
            if (await AuthService.CheckUsernameExists(Model!.Username))
            {
                errorMessage = "Nome de utilizador já está em uso!";
                return;
            }
            
            await AuthService.CreateUser(Model!.Username, Model.Password, Model.Email);
            await InvokeAsync(() => Navigator.NavigateTo("/login"));
            Console.WriteLine("Done");
        }
        catch (ApplicationException ex)
        {
            errorMessage = "Erro no registro";
            errorDetails = ex.Message;
            showDetails = true;
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado";
            errorDetails = ex.Message;
            showDetails = true;
        }
    }
}