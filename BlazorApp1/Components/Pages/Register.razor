@page "/register"
@using BlazorApp1.Services.RegLogin
@inject Sign AuthService
@inject NavigationManager Navigator
@inject IConfiguration Config

<EditForm Model="@model" OnValidSubmit="@HandleRegistration" FormName="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Username</label>
        <InputText @bind-Value="model.Username" class="form-control" />
        <ValidationMessage For="@(() => model.Username)" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="model.Email" class="form-control" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="model.Password" class="form-control" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
            @if (showDetails)
            {
                <div class="mt-2 small">@errorDetails</div>
            }
        </div>
    }

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegistrationModel model = new();
    private string errorMessage = string.Empty;
    private string errorDetails = string.Empty;
    private bool showDetails = false;

    private async Task HandleRegistration()
    {
        errorMessage = string.Empty;
        errorDetails = string.Empty;
        showDetails = false;

        try
        {
            if (await AuthService.CheckUsernameExists(model.Username))
            {
                errorMessage = "Nome de usuário já está em uso!";
                return;
            }

            await AuthService.CreateUser(model.Username, model.Password, model.Email);
            Navigator.NavigateTo("/login");
        }
        catch (ApplicationException ex)
        {
            errorMessage = "Erro no registro";
            errorDetails = ex.Message;
            showDetails = true;
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado";
            errorDetails = ex.Message;
            showDetails = true;
        }
    }

    
}