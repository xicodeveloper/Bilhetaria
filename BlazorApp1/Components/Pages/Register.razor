@layout EmptyLayout
@page "/register"
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services.RegLogin
@inject IAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
<div class="page-container">
    <img src="/img/popcorn.png" class="popcorn" alt="CinUMa Logo">
    <div class="login-container">
        <h1 class="title-login">CinUMa</h1>
        <span class="subtitle-login">Aluga, Compra ou Assiste no Cinema... 
 TUDO à distância de UM CLIQUE!</span>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
                @if (showDetails)
                {
                    <div class="mt-2 small">@errorDetails</div>
                }
            </div>
        }

        <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="user-register" class="loginform">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Nome de utilizador</label>
                <InputText @bind-Value="Model!.Username" class="form-control" placeholder="Username" />
            </div>

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="Model!.Email" class="form-control" placeholder="exemplo@email.com" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText type="password" @bind-Value="Model!.Password" class="form-control" placeholder="Password" />
            </div>

            <button type="submit" class="loginsub">Registar</button>
        </EditForm>

        <div class="mt-3">
            <span>Já tem conta?</span>
            <br><a href="/login">Iniciar Sessão</a>
        </div>
    </div>
</div>
@code {
    [SupplyParameterFromForm]
    private RegistrationModel? Model { get; set; }
    private string errorMessage = string.Empty;
    private string errorDetails = string.Empty;
    private bool showDetails = false;

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
    }
    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        errorDetails = string.Empty;
        showDetails = false;
        try
        {
            if (await AuthService.CheckUsernameExists(Model!.Username))
            {
                errorMessage = "Nome de utilizador já está em uso!";
                return;
            }
            if(await AuthService.CheckEmailExists(Model!.Email))
            {
                errorMessage = "Email já está em uso!";
                return;
            }
            await AuthService.CreateUser(Model!.Username, Model.Password, Model.Email);
            var encodedEmail = Uri.EscapeDataString(Model.Email);
            HttpContextAccessor.HttpContext.Response.Redirect($"/confirmar-email?email={encodedEmail}");

        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado";
            errorDetails = ex.Message;
            showDetails = true;
        }
    }
}
