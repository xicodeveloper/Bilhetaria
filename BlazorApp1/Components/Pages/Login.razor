
@page "/login"
@using BlazorApp1.Services.RegLogin
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpContextAccessor HttpContextAccessor

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="user-login">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label>Nome de utilizador</label>
        <InputText @bind-Value="Model!.Username" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="Model!.Password" class="form-control" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
            @if (showDetails)
            {
                <div class="mt-2 small">@errorDetails</div>
            }
        </div>
    }
    <button type="submit" class="btn btn-primary">Login</button>
    <div class="mt-3">
        Não tem conta? <a href="/register">Criar nova conta</a>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm] private LoginModel? Model { get; set; } = new();

    private string errorMessage = string.Empty;
    private string errorDetails = string.Empty;
    private bool showDetails = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            HttpContextAccessor.HttpContext.Response.Redirect("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await AuthService.LoginAsync(Model!.Username, Model.Password);

            // Adicione verificação de null
            if (result == null)
            {
                errorMessage = "Erro na resposta do servidor";
                return;
            }

            if (!result.Success || result.ClaimsPrincipal == null)
            {
                errorMessage = "Credenciais inválidas!";
                return;
            }

            if (AuthStateProvider is CustomAuthStateProvider customProvider)
            {

                if (AuthStateProvider is CustomAuthStateProvider provider)
                {
                    await provider.UpdateAuthenticationStateAsync(result.ClaimsPrincipal);
                    await AuthStateProvider.GetAuthenticationStateAsync(); // Forçar atualização
                    HttpContextAccessor.HttpContext.Response.Redirect("/debug");
                }
                else
                {
                    errorMessage = "Autenticação incompleta";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado";
            errorDetails = ex.Message;
            Console.WriteLine(ex.StackTrace);
            showDetails = true;
        }
    }
}
}