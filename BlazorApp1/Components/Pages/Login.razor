
@layout EmptyLayout
@page "/login"
@attribute [AllowAnonymous]
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services.RegLogin
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpContextAccessor HttpContextAccessor
<div class="page-container">
    <img src="/img/popcorn.png" class="popcorn" alt="CinUMa Logo">
<div class="login-container">
    <h1 class="title-login">CinUMa</h1>
    <span class="subtitle-login">Bem-vindo(a) de volta! Faz login para continuar.</span>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
            @if (showDetails)
            {
                <div class="mt-2 small">@errorDetails</div>
            }
        </div>
    }
    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="user-login" class="loginform">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label>Nome de utilizador</label>
            <InputText @bind-Value="Model!.Username" class="form-control" placeholder="Username"/>
        </div>

        <div class="form-group">
            <label>Password</label>
            <InputText type="password" @bind-Value="Model!.Password" class="form-control" placeholder="Password"/>
        </div>

        <button type="submit" class="loginsub">Login</button>
       

    </EditForm>

    <div class="mt-3">
        <span> Regista-te</span>
        <br><a href="/register">AQUI</a>
    </div>
</div>
</div>

@code {
    [SupplyParameterFromForm] private LoginModel? Model { get; set; } = new();

    private string errorMessage = string.Empty;
    private string errorDetails = string.Empty;
    private bool showDetails = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            HttpContextAccessor.HttpContext.Response.Redirect("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await AuthService.LoginAsync(Model!.Username, Model.Password);

            // Adicione verificação de null
            if (result == null)
            {
                errorMessage = "Erro na resposta do servidor";
                return;
            }

            if (!result.Success || result.ClaimsPrincipal == null)
            {
                errorMessage = "Credenciais inválidas!";
                return;
            }

            if (AuthStateProvider is CustomAuthStateProvider customProvider)
            {

                if (AuthStateProvider is CustomAuthStateProvider provider)
                {
                    
                    await provider.UpdateAuthenticationStateAsync(result.ClaimsPrincipal);
                    await AuthStateProvider.GetAuthenticationStateAsync(); // Forçar atualização
                    HttpContextAccessor.HttpContext.Response.Redirect("/");
                }
                else
                {
                    errorMessage = "Autenticação incompleta";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado";
            errorDetails = ex.Message;
            Console.WriteLine(ex.StackTrace);
            showDetails = true;
        }
    }
}