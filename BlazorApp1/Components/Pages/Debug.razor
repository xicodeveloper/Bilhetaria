@layout EmptyLayout
@page "/debug/{Username}"
@using System.Security.Claims
@using BlazorApp1.Components.Layout
@using BlazorApp1.Services
@using BlazorApp1.Services.RegLogin
@using Mysqlx.Crud
@inject IAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
@inject CustomAuthStateProvider AuthStateProvider

<div class="page-container">
    <img src="/img/popcorn.png" class="popcorn" alt="CinUMa Logo">
    <div class="login-container">
        <h1 class="title-login">CinUMa</h1>
        <span class="subtitle-login">Aluga, Compra ou Assiste no Cinema... 
        TUDO à distância de UM CLIQUE!</span>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
                @if (showDetails)
                {
                    <div class="mt-2 small">@errorDetails</div>
                }
            </div>
        }

        <EditForm Model="MyModel" OnValidSubmit="HandleValidSubmit" class="edit-profile" FormName="Form">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Nome de utilizador</label>
                <InputText @bind-Value="MyModel.Username" class="form-control" placeholder="@Username" />
            </div>

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="MyModel.Email" class="form-control" placeholder="@EmailUser" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText type="password" @bind-Value="MyModel.NewPassword" class="form-control" placeholder="******" />
            </div>

            <button type="submit" class="loginsub">EditProfile</button>
        </EditForm>

        <div class="mt-3">
            <span>Já tem conta?</span>
            <br />
            <a href="/login">Iniciar Sessão</a>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Username { get; set; }
    [SupplyParameterFromForm]
    private EditModel MyModel { get; set; } = new EditModel();
    private string errorMessage = string.Empty;
    private string errorDetails = string.Empty;
    private bool showDetails = false;
    private User currentUser = new();
    private string EmailUser;
    private bool isSameUsername;
    
    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.FindUserByUsername(Username);
        isSameUsername = currentUser.Username == Username;
        EmailUser = currentUser.Email;
        Console.WriteLine(currentUser);
        if (currentUser != null)
        {
            MyModel = new EditModel 
            {
                Username = MyModel.Username,
                Email = MyModel.Email
            };
            StateHasChanged();
           
        }
        else
        {
            HttpContextAccessor.HttpContext?.Response.Redirect("/error");
        }
    }
   
    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;
        errorDetails = string.Empty;
        showDetails = false;

        try
        {
            Console.WriteLine("Formulário Recebido:");
            Console.WriteLine($"Username: {MyModel.Username}");
            Console.WriteLine($"Email: {MyModel.Email}");
            Console.WriteLine($"Nova Password: {MyModel.NewPassword}");

           var update = await AuthService.UpdateUser(
               currentUser.Id,
                MyModel.Username,
                MyModel.Email,
                MyModel.NewPassword,
                isSameUsername
            );

            if (update)
            {
                var newClaims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, MyModel.Username),
                    new Claim(ClaimTypes.Email, MyModel.Email)
                };
                var newIdentity = new ClaimsIdentity(newClaims, "Cookies");
                var newPrincipal = new ClaimsPrincipal(newIdentity);
                
                await AuthStateProvider.UpdateAuthenticationStateAsync(newPrincipal);
                HttpContextAccessor.HttpContext?.Response.Redirect("/");
            }
            else
            {
                errorMessage = "Erro ao atualizar o utilizador.";
                showDetails = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado";
            errorDetails = ex.Message;
            showDetails = true;
        }
    }
    
}
